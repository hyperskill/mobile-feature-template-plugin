package ${PACKAGE_NAME}

import org.hyperskill.app.core.injection.AppGraph
import $COMMON_MAIN_PRESENTATION_PACKAGE_NAME.${FULL_FEATURE_NAME}.Action
import $COMMON_MAIN_PRESENTATION_PACKAGE_NAME.${FULL_FEATURE_NAME}.Message
#if(${USE_VIEW_STATE})
import $COMMON_MAIN_PRESENTATION_PACKAGE_NAME.${FULL_FEATURE_NAME}.ViewState
#else
import $COMMON_MAIN_PRESENTATION_PACKAGE_NAME.${FULL_FEATURE_NAME}.State
#end
import ru.nobird.app.presentation.redux.feature.Feature
#set($camel_case_feature = $SHORT_FEATURE_NAME.substring(0,1).toLowerCase() + $SHORT_FEATURE_NAME.substring(1))

internal class ${SHORT_FEATURE_NAME}ComponentImpl(
    private val appGraph: AppGraph
) : ${SHORT_FEATURE_NAME}Component {
    override val ${camel_case_feature}: Feature<${STATE_TYPE}, Message, Action>
        get() = ${FULL_FEATURE_NAME}Builder.build(
            analyticInteractor = appGraph.analyticComponent.analyticInteractor,
            logger = appGraph.loggerComponent.logger,
            buildVariant = appGraph.commonComponent.buildKonfig.buildVariant
        )
}